#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:nil title:t toc:nil todo:t |:t
#+title: MQL
#+date: <2022-12-01 Thu 9:30-11:30>
#+author: Philippe Gabriel
#+email: philippe.gabriel.1@umontreal.ca
#+startup: inlineimages latexpreview
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.2 (Org mode 9.5.5)
#+cite_export:
#+reveal_hlevel: 1
#+reveal_init_options: slideNumber:true
#+reveal_extra_css: ./mvcsql.css
#+reveal_theme: blood

* MQL - A DSQL Designed to Query Versionnable Modeling Projects

* Plan

1. Introduction
   * Motivation
   * Goal
   * Terminology
2. Problem
   * Problem to tackle
   * Solution
   * Implementation Details
   * Example
3. Demonstration
4. Conclusion
   * Related work
   * Futur work
5. Questions/Discussion
6. References

* Introduction

** Motivation

*** Line-Oriented

[[./img/mvcsql_20221120_234149_sBGlfg.png]]

*** Semantically-Oriented

[[./img/modeldiff.png]]

/DSMCompare: domain-specific model differencing for graphical domain-specific languages by Manouchehr Zadahmad et al./

*** Domain-Specific Version Control Systems

- Units of comparison - Semantic comparison
- Breadth of features (i.e. commands)
- Collaborative aspect
- *Query VCS*
- CICD
- Storage medium
- ...

/A Roadmap towards Domain-Specific Version Control Systems by Eugene Syriani and Manuel Wimmer/

** Goal

MQL - A DSQL to query such version-controlled modeling repositories

** Terminology

| Term           | Definition                                                            |
|----------------+-----------------------------------------------------------------------|
| Neo4J          | Graph Database Management system                                      |
| Cypher         | Neo4J's graph query language                                          |
| Graph database | Nodes and edges format of storing data useful for many relationships  |
| VCS            | System Responsible for managing changes to collections of information |

* Problem

** Problem to tackle

Provide and DSQL for querying modeling projects

** Solution

- Graph database
- Queries are expressed in MQL
- Relies on _model-to-text_ transformation

*** Overview

1. MQL expression
2. MQL model
3. Model-to-text transformation
4. Cypher expression
5. Query execution on Neo4j database

Somewhat similar process for storing a Repository onto Neo4j

*** Repository

[[./img/repo-metamodel.png]]

*** MQL

[[./img/mql-metamodel.png]]

** Implementation Details

*** Xtext grammar

[[./img/xtext-grammar.png]]

*** Egl transformation

[[./img/egl-transformation.png]]

*** Ant Workflow

#+begin_src nxml

  <?xml version="1.0" encoding="UTF-8"?>
  <project default="runQuery">
    <property name="skipRepo" value="false"/>
    <property name="repo" value="Repo"/>
    <property name="query" value="query"/>
    <property name="cypherBin"
              value="..\..\..\..\.Neo4jDesktop\relate-data\dbmss\dbms-ff24d0be-5732-4482-8e24-e3ec64f9deab\bin\cypher-shell.bat"/>

    <target name="loadRepo">
      <epsilon.emf.loadModel name="repository"
                             read="true"
                             store="false"
                             metamodelfile="../Repository/metamodel/Repository.ecore"
                             modelfile="../Repository/models/${repo}.xmi"/>
    </target>

    <target name="loadQuery">
      <epsilon.emf.loadModel name="modelQuery"
                             read="true"
                             store="false"
                             metamodelfile="metamodel/ModelQueryLanguage.ecore"
                             modelfile="models/${query}.xmi"/>
    </target>

    <target name="storeRepo" depends="loadRepo">
      <epsilon.egl src="../Repository/transformation/neo4j.egx">
        <model ref="repository" as="M"/>
      </epsilon.egl>
      <echo>Repository Cypher Query Generated</echo>
      <eclipse.refreshLocal resource="../Repository"/>
    </target>

    <target name="storeQuery" depends="loadQuery">
      <epsilon.egl src="transformation/cypher.egx">
        <model ref="modelQuery" as="M"/>
      </epsilon.egl>
      <echo>MQL Cypher Query Generated</echo>
      <eclipse.refreshLocal resource="../ModelQueryLanguage"/>
    </target>

    <target name="createRepo" depends="storeRepo" unless="${skipRepo}">
      <exec executable="cmd">
        <arg value="/c"/>
        <arg value="runCypher.bat"/>
        <arg value="..\Repository\models\${repo}.cypher"/>
        <arg value="${cypherBin}"/>
      </exec>
      <echo>Repo Database Initialized</echo>
    </target>

    <target name="runQuery" depends="createRepo, storeQuery">
      <echo>Running Cypher Query...</echo>
      <exec executable="cmd">
        <arg value="/c"/>
        <arg value="runCypher.bat"/>
        <arg value="models\query.cypher"/>
        <arg value="${cypherBin}"/>
      </exec>
    </target>
  </project>

#+end_src

*** Neo4J Database

[[./img/graphdb.png]]

** Example

Textual MQL expression

#+begin_src java

  WHO head {
      branchName = "main"
  }?

#+end_src

#+reveal: split:t

Converted to Cypher expression

#+begin_src sql

  MATCH (b1:Branch)-[h1:head]->(c1:Commit)
  WHERE b1.branchName = "main"
  RETURN c1.author

#+end_src

#+reveal: split:t

Producing this result

[[./img/example-result.png]]

* Demonstration

* Conclusion

** Related Work

- NMF
- AMoR
- Mogwai

** Futur Work

MQL allows one to express simple queries on a version-controlled project at a higher level of abstraction

- Enhance autcompletion feature
- Permit more complex queries
- Integration with NMF

* Questions / Discussion

* References

1. Domain Specific Version Control Systems by Manouchehr Zadahmad Jafarlou
2. DSMCompare: domain-specific model differencing for graphical domain-specific languages by Manouchehr Zadahmad et al.
3. A Roadmap towards Domain-Specific Version Control Systems by Eugene Syriani and Manuel Wimmer

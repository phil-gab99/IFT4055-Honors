/*
 * generated by Xtext 2.28.0
 */
package geodes.sms.modelquerylanguage.serializer;

import com.google.inject.Inject;
import geodes.sms.modelquerylanguage.services.ModelQueryLanguageTextualGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class ModelQueryLanguageTextualSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ModelQueryLanguageTextualGrammarAccess grammarAccess;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ModelQueryLanguageTextualGrammarAccess) access;
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCONTAINER_DELIM_LEFTRule())
			return getCONTAINER_DELIM_LEFTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCONTAINER_DELIM_RIGHTRule())
			return getCONTAINER_DELIM_RIGHTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getELEM_SEPARATORRule())
			return getELEM_SEPARATORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getQUERY_ENDRule())
			return getQUERY_ENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSUBJECT_DELIM_LEFTRule())
			return getSUBJECT_DELIM_LEFTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSUBJECT_DELIM_RIGHTRule())
			return getSUBJECT_DELIM_RIGHTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * CONTAINER_DELIM_LEFT: "{";
	 */
	protected String getCONTAINER_DELIM_LEFTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "{";
	}
	
	/**
	 * CONTAINER_DELIM_RIGHT: "}";
	 */
	protected String getCONTAINER_DELIM_RIGHTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "}";
	}
	
	/**
	 * ELEM_SEPARATOR: ",";
	 */
	protected String getELEM_SEPARATORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * QUERY_END: "?";
	 */
	protected String getQUERY_ENDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "?";
	}
	
	/**
	 * SUBJECT_DELIM_LEFT: "[";
	 */
	protected String getSUBJECT_DELIM_LEFTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[";
	}
	
	/**
	 * SUBJECT_DELIM_RIGHT: "]";
	 */
	protected String getSUBJECT_DELIM_RIGHTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "]";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

}

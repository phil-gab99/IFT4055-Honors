/*
 * generated by Xtext 2.28.0
 */
package geodes.sms.modelquerylanguage.serializer;

import ModelQueryLanguage.ModelQuery;
import ModelQueryLanguage.ModelQueryLanguagePackage;
import ModelQueryLanguage.QueryFile;
import com.google.inject.Inject;
import geodes.sms.modelquerylanguage.services.ModelQueryLanguageTextualGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class ModelQueryLanguageTextualSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ModelQueryLanguageTextualGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelQueryLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelQueryLanguagePackage.MODEL_QUERY:
				if (rule == grammarAccess.getModelQueryHeadParentRule()) {
					sequence_ModelQueryHeadParent(context, (ModelQuery) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getModelQueryModelContentsRule()) {
					sequence_ModelQueryModelContents(context, (ModelQuery) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getModelQueryModelRule()) {
					sequence_ModelQueryModel(context, (ModelQuery) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getModelQueryNextFromToRule()) {
					sequence_ModelQueryNextFromTo(context, (ModelQuery) semanticObject); 
					return; 
				}
				else break;
			case ModelQueryLanguagePackage.QUERY_FILE:
				sequence_QueryFile(context, (QueryFile) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModelQueryHeadParent returns ModelQuery
	 *
	 * Constraint:
	 *     (
	 *         (operator=Operator | operator=WhereSyn) 
	 *         (subject='head' | subject='parent') 
	 *         (containerParameters+=BranchParameter containerParameters+=BranchParameter*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ModelQueryHeadParent(ISerializationContext context, ModelQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModelQueryModelContents returns ModelQuery
	 *
	 * Constraint:
	 *     (
	 *         (operator=Operator | operator=WhereSyn) 
	 *         (subject='changed' | subject='created' | subject='deleted') 
	 *         (containerParameters+=CommitParameter containerParameters+=CommitParameter*)? 
	 *         (diffParameters+=Properties diffParameters+=Properties*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ModelQueryModelContents(ISerializationContext context, ModelQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModelQueryModel returns ModelQuery
	 *
	 * Constraint:
	 *     ((operator=Operator | operator=WhereSyn) subject='model' (containerParameters+=ModelParamater containerParameters+=ModelParamater*)?)
	 * </pre>
	 */
	protected void sequence_ModelQueryModel(ISerializationContext context, ModelQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModelQueryNextFromTo returns ModelQuery
	 *
	 * Constraint:
	 *     (
	 *         (operator=Operator | operator=WhereSyn) 
	 *         (subject='next' | subject='from' | subject='to') 
	 *         (containerParameters+=CommitParameter containerParameters+=CommitParameter*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ModelQueryNextFromTo(ISerializationContext context, ModelQuery semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     QueryFile returns QueryFile
	 *
	 * Constraint:
	 *     (
	 *         (queries+=ModelQueryHeadParent | queries+=ModelQueryNextFromTo | queries+=ModelQueryModel | queries+=ModelQueryModelContents) 
	 *         queries+=ModelQueryHeadParent? 
	 *         ((queries+=ModelQueryNextFromTo | queries+=ModelQueryModel | queries+=ModelQueryModelContents)? queries+=ModelQueryHeadParent?)*
	 *     )?
	 * </pre>
	 */
	protected void sequence_QueryFile(ISerializationContext context, QueryFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
